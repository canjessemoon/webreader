# WebReader: Web Content Text-to-Speech Application

![React](https://img.shields.io/badge/React-19.1-61dafb)
![TypeScript](https://img.shields.io/badge/TypeScript-5.8-3178c6)
![Tailwind CSS](https://img.shields.io/badge/Tailwind-4.1-38bdf8)
![Vite](https://img.shields.io/badge/Vite-6.3-646cff)

WebReader is a feature-rich web application that extracts content from websites and transforms it into speech using Text-to-Speech technology. Built with modern web technologies, it provides a clean, accessible interface with extensive customization options.

## 🌟 Key Features

- **Content Extraction** - Intelligent extraction of main content from websites
- **Text-to-Speech** - High-quality speech synthesis with voice customization
- **Multi-Proxy System** - Automatic fallback between different CORS proxies
- **Responsive UI** - Works seamlessly on mobile, tablet, and desktop
- **Accessibility** - Fully keyboard navigable with high-contrast options
- **Dark Mode** - Toggle between light and dark themes
- **Railway Deployment** - Easy deployment to Railway platform

## 🚀 Latest Updates (May 2025)

- **Simplified Deployment** - Streamlined Railway deployment process
- **Enhanced Error Handling** - Better error reporting and fallbacks
- **Multiple CORS Proxies** - More reliable content extraction
- **Improved UI** - Fixed layout and scrolling issues
- **Health Check System** - Better monitoring of application health

## 📋 Project Structure

```
webreader/
├── src/                  # Frontend source code
│   ├── components/       # React components
│   ├── services/         # Service modules
│   └── types/            # TypeScript type definitions
├── server/               # Backend server code
├── public/               # Static assets
├── dist/                 # Build output
└── docs/                 # Documentation
```

## 🛠️ Technology Stack

### Frontend
- **React** - UI component library
- **TypeScript** - Type-safe JavaScript
- **Tailwind CSS** - Utility-first CSS framework
- **Vite** - Next-generation frontend tooling

### Backend
- **Express** - Web server framework
- **Cheerio** - Server-side jQuery for HTML parsing
- **html-to-text** - HTML to plain text conversion
- **Axios** - HTTP client

### API
- **Web Speech API** - Browser Text-to-Speech functionality
- **CORS Proxies** - Content access through proxy servers

## 🏃‍♂️ Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/webreader.git
cd webreader

# Install dependencies
npm install
```

### Development

```bash
# Start development server (frontend only)
npm run dev

# Start both frontend and backend servers
npm run dev:all
```

### Production Build

```bash
# Build for production
npm run build

# Start production server
npm run start
```

## 📦 Deployment Options

### Railway (Recommended)

1. Copy the simplified Railway configuration:
   ```bash
   cp railway.simple.json railway.json
   ```

2. Push to GitHub and connect to Railway:
   - Create a new project in Railway
   - Connect to your GitHub repository
   - Deploy the application

Detailed instructions available in `SIMPLE_DEPLOYMENT.md`

### Traditional Hosting

For standard Node.js hosting environments, follow the instructions in `PLATFORMLESS_DEPLOYMENT.md`.

## 🔍 Testing

Run the comprehensive test script to verify your setup:

```bash
./test-webreader.ps1
```

This will check all components of the application and ensure everything is correctly configured.

## 📄 Documentation

- **`FEATURES.md`** - Detailed feature documentation
- **`DEPLOYMENT_CHECKLIST.md`** - Pre-flight deployment checks
- **`SIMPLE_DEPLOYMENT.md`** - Simplified Railway deployment guide
- **`PLATFORMLESS_DEPLOYMENT.md`** - Traditional hosting guide

## 🔧 Troubleshooting

### Content Extraction Issues

If you encounter "No content found on this page" errors:

1. Check if the website blocks content extraction
2. Try a different CORS proxy using the UI option
3. Check the console for specific error messages

### Deployment Problems

1. Verify all checkpoints in `DEPLOYMENT_CHECKLIST.md`
2. Check Railway logs for detailed error information
3. Ensure health check endpoints are properly configured

## 🔜 Future Enhancements

- Browser extension version
- User accounts to save preferences
- Offline reading capability
- PDF document support
- Automatic language detection
- Content translation features

## 📝 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 👥 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
