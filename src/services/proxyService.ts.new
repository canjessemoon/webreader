// Enhanced proxy service with performance tracking and better fallback
// This module is designed to be imported and used in contentService.ts

// Detect if we're running in production (Railway)
const isProduction = typeof window !== 'undefined' && 
                     window.location && 
                     (window.location.hostname.includes('railway.app') || 
                      window.location.hostname === 'webreader-production.up.railway.app' ||
                      window.location.hostname.includes('.up.railway.app'));

// List of public CORS proxies that can be used as fallbacks
const PUBLIC_PROXIES = [
  'https://corsproxy.io/?',
  'https://api.allorigins.win/raw?url=',
  'https://proxy.cors.sh/',
  'https://cors-anywhere.herokuapp.com/',
  'https://crossorigin.me/',
  'https://thingproxy.freeboard.io/fetch/'
];

// Configuration
let useExternalProxy = isProduction; // Auto-use external proxy in production
let proxyIndex = 0;

// Function to get the current proxy URL
export const getProxyUrl = () => {
  if (useExternalProxy) {
    return PUBLIC_PROXIES[proxyIndex];
  }
  return '/api/proxy?url='; // Default internal proxy
};

// Function to enable external proxy usage
export const enableExternalProxy = (index = 0) => {
  useExternalProxy = true;
  proxyIndex = index % PUBLIC_PROXIES.length;
  console.log(`External proxy enabled: ${getProxyUrl()}`);
  return getProxyUrl();
};

// Function to disable external proxy usage
export const disableExternalProxy = () => {
  useExternalProxy = false;
  console.log('External proxy disabled, using internal proxy');
  return getProxyUrl();
};

// Function to cycle through available proxies
export const cycleProxy = () => {
  if (useExternalProxy) {
    proxyIndex = (proxyIndex + 1) % PUBLIC_PROXIES.length;
    console.log(`Switched to proxy: ${getProxyUrl()}`);
  } else {
    enableExternalProxy();
  }
  
  return getProxyUrl();
};

// Function to get all available proxies
export const getAllProxies = () => {
  return [
    '/api/proxy?url=', // Internal proxy
    ...PUBLIC_PROXIES
  ];
};

// Function to reset to the first proxy
export const resetProxy = () => {
  proxyIndex = 0;
  return getProxyUrl();
};

// Track proxy performance
const proxyPerformance = PUBLIC_PROXIES.reduce((acc, proxy) => {
  acc[proxy] = {
    successCount: 0,
    errorCount: 0,
    lastUsed: null,
    avgResponseTime: 0,
  };
  return acc;
}, {} as Record<string, { 
  successCount: number, 
  errorCount: number, 
  lastUsed: Date | null,
  avgResponseTime: number 
}>);

// Function to record proxy success
export const recordProxySuccess = (proxy: string, responseTime: number) => {
  if (proxyPerformance[proxy]) {
    proxyPerformance[proxy].successCount++;
    proxyPerformance[proxy].lastUsed = new Date();
    
    // Update average response time
    const { successCount, avgResponseTime } = proxyPerformance[proxy];
    proxyPerformance[proxy].avgResponseTime = 
      (avgResponseTime * (successCount - 1) + responseTime) / successCount;
  }
};

// Function to record proxy error
export const recordProxyError = (proxy: string) => {
  if (proxyPerformance[proxy]) {
    proxyPerformance[proxy].errorCount++;
    proxyPerformance[proxy].lastUsed = new Date();
  }
};

// Function to get the best performing proxy
export const getBestProxy = () => {
  // Simple algorithm: highest success-to-error ratio
  let bestProxy = PUBLIC_PROXIES[0];
  let bestScore = -1;
  
  for (const proxy of PUBLIC_PROXIES) {
    const { successCount, errorCount } = proxyPerformance[proxy];
    const totalAttempts = successCount + errorCount;
    
    if (totalAttempts === 0) {
      // Untested proxies get a neutral score
      const score = 0;
      if (score > bestScore) {
        bestScore = score;
        bestProxy = proxy;
      }
    } else {
      // Calculate score based on success ratio and response time
      const successRatio = successCount / totalAttempts;
      const score = successRatio * 100 - (proxyPerformance[proxy].avgResponseTime / 1000);
      
      if (score > bestScore) {
        bestScore = score;
        bestProxy = proxy;
      }
    }
  }
  
  return bestProxy;
};
