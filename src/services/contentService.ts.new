import axios from 'axios';
import * as cheerio from 'cheerio';
import { convert } from 'html-to-text';
import { getProxyUrl, cycleProxy } from './proxyService';
import { ContentExtractionError, ContentExtractionErrorType, createContentError } from './errorHandling';

// Function to extract the main content from a website
export const extractContent = async (url: string): Promise<string> => {
  // Get the current API URL from proxyService
  const API_URL = getProxyUrl();
  
  try {
    console.log(`Extracting content from URL: ${url}`);
    console.log(`Using API endpoint: ${API_URL}${url}`);
    
    // Make the request with the appropriate proxy
    const response = await axios.get(`${API_URL}${url}`, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': 'https://www.google.com/'
      },
      timeout: 15000 // 15 second timeout
    });

    console.log('Content extraction response received:', response.status);
    const html = response.data;
    const $ = cheerio.load(html);

    // Remove unwanted elements
    $('script, style, nav, header, footer, iframe, .ad, .ads, .advertisement, .sidebar, [class*="side-"], [class*="nav-"], [id*="nav-"]').remove();

    // Try to find the main content
    let content = '';

    // Check for common article containers
    const articleSelectors = [
      'article', 
      '.article', 
      '.post', 
      '.content', 
      '.post-content',
      '.entry-content', 
      'main', 
      '#main',
      '.main-content'
    ];

    for (const selector of articleSelectors) {
      if ($(selector).length) {
        content = $(selector).html() || '';
        break;
      }
    }

    // If no specific content container found, use the body
    if (content === '') {
      // Fallback to the body if we didn't find any of the specific containers
      content = $('body').html() || '';
      
      // Clean up the content to remove any remaining unwanted elements
      const tempDoc = cheerio.load(content);
      tempDoc('script, style, nav, header, footer, iframe').remove();
      content = tempDoc.html() || '';
    }

    // Convert HTML to readable text
    if (content) {
      const text = convert(content, {
        wordwrap: 130,
        selectors: [
          { selector: 'a', options: { ignoreHref: true } },
          { selector: 'img', format: 'skip' }
        ]
      });
      
      // If the result is essentially empty after processing
      if (!text || text.trim().length < 100) {
        throw new ContentExtractionError(
          'No meaningful content found on the page',
          ContentExtractionErrorType.EMPTY_CONTENT,
          url,
          { proxy: API_URL }
        );
      }
      
      return text;
    }
    
    // Throw a proper error if no content was found
    throw new ContentExtractionError(
      'No content found on this page',
      ContentExtractionErrorType.EMPTY_CONTENT,
      url,
      { proxy: API_URL }
    );
    
  } catch (error) {
    // Log the error for debugging
    console.error('Error extracting content:', error);
    
    // If it's already our custom error type, rethrow it
    if (error instanceof ContentExtractionError) {
      throw error;
    }
    
    // Auto-retry with different proxy if it seems like a network or access issue
    if (axios.isAxiosError(error) && 
        (error.message.includes('Network Error') || 
         error.response?.status === 403 || 
         error.response?.status === 429 || 
         error.response?.status === 500)) {
      console.log('Trying with a different proxy service...');
      const newProxyUrl = cycleProxy();
      console.log(`Switched to proxy: ${newProxyUrl}`);
      
      // Try again with the new proxy (recursive call)
      return extractContent(url);
    }
    
    // Otherwise, convert it to our custom error type
    throw createContentError(error, url, API_URL);
  }
};
